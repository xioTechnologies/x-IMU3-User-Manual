import json
import os
import re


def camel_case(string):
    result = ""
    for word in re.sub("[^0-9a-zA-Z]", " ", string).split():
        if result == "":
            result += word.lower()
        elif len(word) == 2 and word == word.upper():  # if two letter acronym
            result += word
        else:
            result += word.lower().capitalize()
    return result


def snake_case(string):
    return re.sub("[^0-9a-zA-Z]", " ", string).lower().replace(" ", "\_")


code = ""

with open("DeviceSettings.json") as json_file:
    for json_object in json.load(json_file):
        # Section
        temp_section = json_object["name"]

        for word in re.sub("[^0-9a-zA-Z]", " ", temp_section).split():
            if word.isupper():
                temp_section = temp_section.replace(word, "\\acs{" + word + "}")

        # Read-only
        try:
            calibration = json_object["calibration"]
        except Exception as _:
            calibration = False
        try:
            read_only = json_object["read only"]
        except Exception as _:
            read_only = False | calibration

        if read_only:
            read_only_string = " (read-only)"
        else:
            read_only_string = ""

        # Type
        temp_type = "number"

        if "FusionMatrix" in json_object["declaration"]:
            temp_type = "array of 9 numbers"

        if "FusionVector" in json_object["declaration"]:
            temp_type = "array of 3 numbers"

        for declaration in {"char name[", "RS9116IPAddress", "RS9116MacAddress"}:
            if declaration in json_object["declaration"]:
                temp_type = "string"

        if "bool" in json_object["declaration"]:
            temp_type = "true or false"

        # Default
        temp_default = json_object["default"].replace("{{", "[").replace("}}", "]").replace("{", "").replace("}", "")

        if "number" in temp_type:
            temp_default = temp_default.replace("f", "")

        if temp_default == "SerialModeDisabled":
            temp_default = "0"

        if temp_default == "WirelessModeWlanAP":
            temp_default = "2"

        if temp_default == "RS9116WlanCommandRegionEurope":
            temp_default = "2"

        if temp_default == "WirelessWlanClientChannelAll":
            temp_default = "0"

        if temp_default == "0x00000000":
            temp_default = "\\enquote{0.0.0.0}"

        if temp_default == "0x0201A8C0":
            temp_default = "\\enquote{192.168.1.2}"

        if temp_default == "0x00FFFFFF":
            temp_default = "\\enquote{255.255.255.0}"

        if temp_default == "0x0101A8C0":
            temp_default = "\\enquote{192.168.1.1}"

        if temp_default == "0x0101A9C0":
            temp_default = "\\enquote{192.169.1.1}"

        if temp_default == "WirelessWlanAPChannel36":
            temp_default = "36"

        if temp_default == "WirelessBTDiscoveryModeLimited":
            temp_default = "2"

        if temp_default == "FusionAxesAlignmentPXPYPZ":
            temp_default = "0"

        if temp_default == "FusionConventionNwu":
            temp_default = "0"

        if temp_default == "SendAhrsMessageTypeQuaternion":
            temp_default = "0"

        if '"' in temp_default:
            temp_default = "\\enquote{" + temp_default.replace('"', "") + "}"

        # Create TEX
        camel_case_name = camel_case(json_object["name"])
        snake_case_name = snake_case(json_object["name"])

        code += f"""
\\begingroup
    \\def\\tempSection{{{temp_section + read_only_string}}}
    \\def\\tempLabel{{sec:{camel_case_name}}}
    \\def\\tempDescription
    {{
    }}
    \\def\\tempKey{{{snake_case_name}}}
    \\def\\tempType{{{temp_type}}}
    \\def\\tempDefault{{{temp_default}}}
    \\deviceSetting
\\endgroup\n"""

with open("individualSettings.tex", "w") as tex_file:
    tex_file.write(f"% This file was generated by {os.path.basename(__file__)}\n")
    tex_file.write(code)
